---
tags:
- 数据库
- MySQL

style: summer
---
@toc

# JavaEEDay32数据库


## 一、数据库的组成
- 数据库服务器：装有数据库软件的一个电脑
- 数据库：软件：MySQL、Oracle
- 数据表：一个表格，里面放着一条一条的数据，类似于 Excel
- 字段：表示该数据时什么数据，例如：姓名、年龄、性别；
- 数据行：一个完整的数据

## 二、数据库分类
关系型数据库，非关系型数据库
- 关系型数据库：MySQL

## 三、SQL 语句
结构化查询语句：Structured Query Language


## 四、SQL 语句分类
DDL：数据定义
DML：数据操作
DQL：数据查询
DCL：数据控制
DTL：事务处理

CRUD 对应于：
create
read
update
delete


## 五、从命令行连接数据库
需要：数据库服务器地址  数据库访问用户名  当前访问用户名的密码  （本地连接 第一个可以不输入）
例如完整的数据库连接命名：`mysql -hlocalhost -uroot -p12345`
建议使用方式：`mysql -hlocalhost -uroot -p`然后输入的是加密的密码
- sql 语句以`;`结尾
- 退出命名：`quit`或者`exit`
- 清楚本次错误输入：`\c`



## 六、基本命令

| 命令 | 含义 |
|:--- | :--- |
show databases|查询所有的数据库  
create database hello|创建数据库 hello
drop database hello|删除数据库 hello（不可逆） 
use  hello|使用数据库 hello  （使用下面的表要先进入数据库）


- 创建数据表：`create table 表名(字段名 数据类型，字段名 数据类型);`
```sql
create table stuInfo(
  //格式为：字段名  字段数据类型
  //varchar(30)相比char是可变长的，括号里面数字为可以放置的字节长度
  //tinyint只占一个字节，更加节省空间
  stuID int,
  stuName varchar(30),
  stuGender tinyint,
  stuAge tinyint
);
```

- 删除数据表
`drop table stuInfo;`
- **查看表的详细信息**：`desc 表名;`
- 创建数据库的简要描述：`show create database stuInfo;`显示数据库默认字符集；（该库必须是提前创建好的）
- 创建数据表的简要描述：`show create table hello;` 显示数据表的 engine 和 charset
- 默认的存储引擎应该设置为:InnoDB，字符集设置为：utf8 
- 修改默认存储引擎和字符集的方式：
  - 方式一：只该表当前表的设置：
```sql
create table test(
  name varchar(30);
  age  tinyint;
)engine = InnoDB default charset = utf8;
```
  - 方式二：修改全局配置
  在 MySQL 的配置文件：`my.ini`中设置默认的存储引擎和字符集；


- 修改表格里面内容：
  - 添加新字段：`alter table stuInfo add StuDesc text after stuAge;` 在 stuAge 字段的后面增加 text 类型的新字段 stuDesc，如果在表的最后增加数据，不需要使用 after；
  - 修改老字段的数据类型：`alter tabel stuInfo modify stuName char(30);` 将 stuName 字段的数据类型改为:`char(30)`;
  - 输出已有字段：`alter table stuInfo drop stuDesc;` 删除 stuDesc 字段；
  - 同时修改字段名和数据类型：`alter table stuInfo change stuGender stuSex char(1);`


- 插入数据：属于 DML 操作
  - 选中一些字段添加数据：`insert into stuInfo(stuId, stuName) values(2,"张三");`剩余字段值按照默认值处理；
  - 全部字段添加数据：`insert into stuInfo values(3,"李四", "男" ,23,99);`
  不需要将 stuInfo 中所有字段都列出来：`insert into stuInfo(stuId, stuName,stuSex,stuAge,stuScore) values(1,"王五","男",22,98);`


## MySQL 常用的数据类型
类型 | 具体
---|---
数值类|tinyint  int float  double
文本类|text tinytext longtext
时间 |date timestamp 时间戳
二进制 | blob
一般情况下图片、视频以及大体积文本会先上传到服务器指定保存该类型的文件夹下面，保存时候按照时间和随机数的关系给文件重命名（防止文件重名），同时将保存文件的服务器地址放入到数据库中，之后便可以通过数据库查询到视频地址，通过地址直接访问；

- 其他数据类型
  - timestamp：时间戳，默认可以设置 current_timestamp,可以用于记录当前时间；
  - enum:枚举，一般用于处理互斥的关系，例如：性别、籍贯等，即是单选。同时每一个选项表示的数值是从 1 开始的；

```sql
#首先创建一个带有枚举类型的数据表
create table test(
  testID int(4) not null.
  enumValue enum("南京","上海","杭州")
);
#上面南京对应的枚举值为1，杭州对应的枚举值为3

#采用使用枚举里面的具体数据进行插入数据
insert into test(testID,enumValue) values(1,"南京");
insert into test(testID,enumValue) values(2,"上海");

#采用使用枚举数据的特征进行插入数据，每一个枚举类型都是独立特有的，值是不同的，采用的是枚举数值；
insert into test(testID,enumValue) values(3,1);
insert into test(testID,enumValue) values(4,3);

#插入的枚举类型数值不能超过枚举的范围，下列语句错误；
insert into test(testID,enumValue) values(5,4);
```

- set：集合，处理并列关系。例如：多选
```sql
create table testSet(
#将testID设置为非空，且是自动增长的主键
  testID int(4) not null primary key auto_increment, 
  likes set("Reading","swimming","running")
);

insert into testSet(likes) values("Reading,swimming");
insert into testSet(likes) values(3); 
#set值以二进制表示：1 2 4 8 16  ；要的值加起来就行
```



## 查询语句 DQL 

- 查看所有数据：`select * from 表名;`
- 只查某个表中某些字段数据：`select 字段1，字段2 from 表名;`
- 查询带有条件的数据（以字段值>10 为例）：`select 字段1，字段2 from 表名 where 字段3>10;`
- 查询字段去重之后的数据：`select distinct 字段 from 表名;`
- 获取表中某些字段的值，并且改变展示的字段名称，同时多条限制条件；`select stuName as "姓名" ,stuAge as "年龄" from stuInfo where stuAge >= 20 and stuScore <90;`或者的话可以使用 or;

- 排序查询（默认升序）：`select * from stuInfo order by stuScore asc;`降序改为 desc;
- 多重条件查询：优先主条件，主条件相同按照附条件；`select stuName,stuAge from stuInfo order by stuAge asc, stuScore desc;`
- 模糊查询：
  - 查询 某个字段以某个字符结尾的数据：`select * from 表名 where stuName like "%看";` 其中%为通配符，表示 0 到 n 个字符；
  - 查询某个字段以 看 字结尾，且前面只有一个字符的数据：`select * from 表名 where stuName like "_看";` 其中`_`为通配符，表示 有且仅有 1 个字符；
  - 查询某个字段包含 看 字字符：`select * from 表名 where stuName like "%看%";`

- 模拟分页显示数据：
  - 只获取前 3 条数据：`select * from 表名 limit 3;`
  - 从某个数据开始，向后获取几个数据：`select * from 表名 limit 0, 5;`从 第 0 个数据开始，向后获取 5 个数据；

- 内置函数：不推荐使用，应该是从数据库获取数据，然后使用 Java 代码处理数据；
  - 获取最大值：`select max(stuAge) as "最大年龄" from stuInfo;` 最小值为：min,平均值为：avg
  - 获取总数：`select count(*) as "总数" from stuInfo where stuAge > 20;`中间的 as 和 where 都是可用可以不用；




## 删除数据
 - 删除数据表中的所有数据行：`delete from 表名;`
 - 删除带有条件的数据行:`delete from 表名 where stuId = 3;`where 后面的条件可以是：> < >= <= = !=
 - 使用 truncate 会清空整个数据表，但是不会影响数据表结构，同时会影响原来的自增条件，会从 1 开始；`truncate table 表名;`


## 修改更新数据
例如更新一些值为空的字段数据：`update 表名 set stuAge = 12,stuName = "赵六" where stuId = 2;` 注意增加 where 语句，否则会将这个表数据进行更新；



## 连表查询

### 一对一查询
man 表中有 manID   manName  girlID; girl 表中有 girlID  girlName;
- 通过 man 和 girl 两表中通过 grilID 进行匹配展示数据:
`select * from man ,girl where man.girlID = girl.girlID;`
另一种方式：内联查询：可以是实现多个表联合查询，其中 on 和 where 类似 【推荐使用】
`select * from man inner join girl on man.girlID = girl.girlID;`


### 一对多查询
father 表中有：fatherID fatherName; son 表中有：sonID  sonName  fatherID;
- 查询某一个父亲下的孩子：`select * from father inner join son on son.fatherID = father.fatherID where fatherName = "XXX";`
将上面使用别名进行简化书写：`select * from father f inner join son s on s.fatherID = f.fatherID where fatherName = "XXX";`


### 多对多查询
**多对多查询需要使用中间表格**
student 表格中有：stuID  stuName ;
中间表格 stuToCouse 中有：stuToCouseID stuID couseID
couse 表格中有：couseID couseName

- 查询某一个学生选了哪些课程：`select * from student s inner join stuToCouse sc on s.stuID = sc.stuID inner join couse c on sc.couseID = c.couseID where s.stuName = "XXX";`
- 查询某一课程有哪些学生选择：`select * from couse c inner join stuToCouse sc on c.couseID = sc.couseID inner join student s on sc.stuID = s.stuID where c.couseName = "XXXX";`

